// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Collections.Generic;
using Robotics.Mobile.Core.Bluetooth.LE;

namespace GlucoseX.iOS
{
	public partial class BLEDevicesTableViewController : UITableViewController
	{
		const string cellReuseId = "BLEDeviceCell";

		Adapter adapter;

		//		IDevice currentDevice;

		List<IDevice> devices = new List<IDevice> ();

		public BLEDevicesTableViewController (IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad();

			scanForDevices();
		}


		partial void CancelClicked (NSObject sender)
		{
			DismissViewController(true, null);
		}

		void scanForDevices ()
		{
			adapter = Adapter.Current;

			adapter.DeviceDiscovered += HandleAdapterDeviceDiscovered;
			adapter.DeviceConnected += HandleAdapterDeviceConnected;

			adapter.StartScanningForDevices(Guid.Empty);
		}


		void HandleAdapterDeviceDiscovered (object sender, DeviceDiscoveredEventArgs e)
		{

			if (!string.IsNullOrWhiteSpace(e.Device.Name) || e.Device.ID != Guid.Empty && !devices.Contains(e.Device)) {
				devices.Add(e.Device);

				TableView.ReloadData();
			}

//			Console.WriteLine ("{0}--{1}--{2}", e.Device, e.Device.Name, e.Device.NativeDevice);
//			if (!devices.Contains (e.Device)) {
//				devices.Add (e.Device);
//				TableView.ReloadData ();
//			}
		}


		public override nint NumberOfSections (UITableView tableView)
		{
			return 1;
		}


		public override nint RowsInSection (UITableView tableview, nint section)
		{
			return devices.Count;
		}


		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell(cellReuseId, indexPath);

			var device = devices[indexPath.Row];

//			var name = "no name";
//
//			if (!string.IsNullOrWhiteSpace (device.Name)) {
//			
//				name = device.Name;
//			
//			} else {
//
//				var cbPeripheral = device.NativeDevice as CoreBluetooth.CBPeripheral;
//
//				// Console.WriteLine (cbPeripheral);
//
//				if (cbPeripheral != null && !string.IsNullOrWhiteSpace (cbPeripheral.Name)) {
//					name = cbPeripheral.Name;
//				}
//			}

			cell.TextLabel.Text = !string.IsNullOrWhiteSpace(device.Name) ? device.Name : string.Format("({0})", device.ID);

			return cell;
		}


		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			var device = devices[indexPath.Row];

			adapter.ConnectToDevice(device);
		}


		void HandleAdapterDeviceConnected (object sender, DeviceConnectionEventArgs e)
		{
			e.Device.ServicesDiscovered += HandleDeviceServicesDiscovered;
			e.Device.DiscoverServices();
		}


		void HandleDeviceServicesDiscovered (object sender, EventArgs e)
		{
			var device = sender as IDevice;

			if (device != null) {

				device.ServicesDiscovered -= HandleDeviceServicesDiscovered;

				foreach (var service in device.Services) {
					
					Console.WriteLine(service.Name);
				}
			}
		}
	}
}